import heapq


def dijkstra(graph, start_node):
    log = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞

    num_nodes = len(graph)
    inf = float("inf")

    # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
    shortest_distances = [inf] * num_nodes
    predecessors = [None] * num_nodes

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã
    shortest_distances[start_node] = 0
    priority_queue = [(0, start_node)]  # –û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≤–µ—Ä—à–∏–Ω–∞)

    log.append(f"üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—à–∏–Ω—ã {start_node}. –ú–∞—Å—Å–∏–≤—ã:")
    log.append(f"  - –ö—Ä–∞—Ç—á–∞–π—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (shortest_distances): {shortest_distances}")
    log.append(f"  - –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ (predecessors): {predecessors}")

    while priority_queue:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—à–∏–Ω—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
        current_distance, current_node = heapq.heappop(priority_queue)
        log.append(
            f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞ {current_node} —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º {current_distance}."
        )

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_distance > shortest_distances[current_node]:
            log.append("  üö´ –≠—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω
        for neighbor, edge_weight in graph[current_node]:
            new_distance = current_distance + edge_weight
            log.append(
                f"  ‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω—é—é –≤–µ—Ä—à–∏–Ω—É {neighbor} —Å –≤–µ—Å–æ–º {edge_weight}."
            )
            log.append(f"    - –ù–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {neighbor}: {new_distance}")

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            if new_distance < shortest_distances[neighbor]:
                shortest_distances[neighbor] = new_distance
                predecessors[neighbor] = current_node  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                heapq.heappush(
                    priority_queue, (new_distance, neighbor)
                )  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                log.append(
                    f"    üîÑ –û–±–Ω–æ–≤–ª—è–µ–º: –∫—Ä–∞—Ç—á–∞–π—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {neighbor} = {new_distance}."
                )
                log.append(f"    –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–µ—Ä—à–∏–Ω—ã {neighbor}: {current_node}")

        log.append(f"  üìä –ú–∞—Å—Å–∏–≤—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—à–∏–Ω—ã {current_node}:")
        log.append(f"    - –ö—Ä–∞—Ç—á–∞–π—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {shortest_distances}")
        log.append(f"    - –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏: {predecessors}")

    return shortest_distances, predecessors, log
